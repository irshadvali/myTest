{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.updateUserRequest = updateUserRequest;\nexports.updateUserSuccess = updateUserSuccess;\nexports.updateUserFailure = updateUserFailure;\nexports.updateUser = updateUser;\nexports.getUserRequest = getUserRequest;\nexports.getUserSuccess = getUserSuccess;\nexports.getUserFailure = getUserFailure;\nexports.getUser = getUser;\nexports.clearUserData = clearUserData;\nexports.clearData = clearData;\nexports.CLEAR_DATA = exports.GET_USER_FAILURE = exports.GET_USER_SUCCESS = exports.GET_USER_REQUEST = exports.UPDATE_USER_FAILURE = exports.UPDATE_USER_SUCCESS = exports.UPDATE_USER_REQUEST = exports.CREATE_USER_FAILURE = exports.CREATE_USER_SUCCESS = exports.CREATE_USER_REQUEST = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _constants = require(\"./constants.action\");\n\nvar CREATE_USER_REQUEST = 'CREATE_USER_REQUEST';\nexports.CREATE_USER_REQUEST = CREATE_USER_REQUEST;\nvar CREATE_USER_SUCCESS = 'CREATE_USER_SUCCESS';\nexports.CREATE_USER_SUCCESS = CREATE_USER_SUCCESS;\nvar CREATE_USER_FAILURE = 'CREATE_USER_FAILURE';\nexports.CREATE_USER_FAILURE = CREATE_USER_FAILURE;\nvar UPDATE_USER_REQUEST = 'UPDATE_USER_REQUEST';\nexports.UPDATE_USER_REQUEST = UPDATE_USER_REQUEST;\nvar UPDATE_USER_SUCCESS = 'UPDATE_USER_SUCCESS';\nexports.UPDATE_USER_SUCCESS = UPDATE_USER_SUCCESS;\nvar UPDATE_USER_FAILURE = 'UPDATE_USER_FAILURE';\nexports.UPDATE_USER_FAILURE = UPDATE_USER_FAILURE;\nvar GET_USER_REQUEST = 'GET_USER_REQUEST';\nexports.GET_USER_REQUEST = GET_USER_REQUEST;\nvar GET_USER_SUCCESS = 'GET_USER_SUCCESS';\nexports.GET_USER_SUCCESS = GET_USER_SUCCESS;\nvar GET_USER_FAILURE = 'GET_USER_FAILURE';\nexports.GET_USER_FAILURE = GET_USER_FAILURE;\nvar CLEAR_DATA = 'CLEAR_DATA';\nexports.CLEAR_DATA = CLEAR_DATA;\n\nfunction updateUserRequest() {\n  return {\n    type: UPDATE_USER_REQUEST,\n    status: _constants.REQUESTING\n  };\n}\n\nfunction updateUserSuccess(updateUser) {\n  return {\n    type: UPDATE_USER_SUCCESS,\n    status: _constants.SUCCESS,\n    updateUser: updateUser\n  };\n}\n\nfunction updateUserFailure(error) {\n  return {\n    type: UPDATE_USER_FAILURE,\n    status: _constants.ERROR,\n    error: error\n  };\n}\n\nfunction updateUser(payload, userId) {\n  return function _callee(dispatch, getState, api) {\n    var result, _resultJson;\n\n    return _regenerator.default.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            dispatch(updateUserRequest());\n            _context.prev = 1;\n            _context.next = 4;\n            return _regenerator.default.awrap(api.put(\"user/\" + userId, payload));\n\n          case 4:\n            result = _context.sent;\n            _context.next = 7;\n            return _regenerator.default.awrap(result.json());\n\n          case 7:\n            _resultJson = _context.sent;\n\n            if (!(result.errorCode > 400)) {\n              _context.next = 10;\n              break;\n            }\n\n            throw new Error(\"[\" + result.errorCode + \"] \" + _resultJson.error.errorMessage);\n\n          case 10:\n            dispatch(updateUserSuccess(_resultJson));\n            _context.next = 16;\n            break;\n\n          case 13:\n            _context.prev = 13;\n            _context.t0 = _context[\"catch\"](1);\n            dispatch(updateUserFailure(_context.t0.message));\n\n          case 16:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[1, 13]], Promise);\n  };\n}\n\nfunction getUserRequest() {\n  return {\n    type: GET_USER_REQUEST,\n    status: _constants.REQUESTING\n  };\n}\n\nfunction getUserSuccess(userObj) {\n  return {\n    type: GET_USER_SUCCESS,\n    status: _constants.SUCCESS,\n    userObj: userObj\n  };\n}\n\nfunction getUserFailure(error) {\n  return {\n    type: GET_USER_FAILURE,\n    status: _constants.ERROR,\n    error: error\n  };\n}\n\nfunction getUser(userId) {\n  return function _callee2(dispatch, getState, api) {\n    var result, _resultJson2;\n\n    return _regenerator.default.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            dispatch(getUserRequest());\n            _context2.prev = 1;\n            _context2.next = 4;\n            return _regenerator.default.awrap(api.get(\"user/\" + userId));\n\n          case 4:\n            result = _context2.sent;\n            _context2.next = 7;\n            return _regenerator.default.awrap(result.json());\n\n          case 7:\n            _resultJson2 = _context2.sent;\n\n            if (!(result.errorCode > 400)) {\n              _context2.next = 10;\n              break;\n            }\n\n            throw new Error(\"[\" + result.errorCode + \"] \" + _resultJson2.error.errorMessage);\n\n          case 10:\n            dispatch(getUserSuccess(_resultJson2));\n            _context2.next = 16;\n            break;\n\n          case 13:\n            _context2.prev = 13;\n            _context2.t0 = _context2[\"catch\"](1);\n            dispatch(getUserFailure(_context2.t0.message));\n\n          case 16:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[1, 13]], Promise);\n  };\n}\n\nfunction clearUserData() {\n  return {\n    type: GET_USER_FAILURE\n  };\n}\n\nfunction clearData() {\n  dispatch(clearUserData(resultJson));\n}","map":{"version":3,"sources":["/Users/irshadvali/Documents/React-Native/myTest/src/actions/user.action.js"],"names":["CREATE_USER_REQUEST","CREATE_USER_SUCCESS","CREATE_USER_FAILURE","UPDATE_USER_REQUEST","UPDATE_USER_SUCCESS","UPDATE_USER_FAILURE","GET_USER_REQUEST","GET_USER_SUCCESS","GET_USER_FAILURE","CLEAR_DATA","updateUserRequest","type","status","REQUESTING","updateUserSuccess","updateUser","SUCCESS","updateUserFailure","error","ERROR","payload","userId","dispatch","getState","api","put","result","json","resultJson","errorCode","Error","errorMessage","message","getUserRequest","getUserSuccess","userObj","getUserFailure","getUser","get","clearUserData","clearData"],"mappings":"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","sourcesContent":["import { SUCCESS, REQUESTING, ERROR } from './constants.action';\n\n\nexport const CREATE_USER_REQUEST = 'CREATE_USER_REQUEST';\nexport const CREATE_USER_SUCCESS = 'CREATE_USER_SUCCESS';\nexport const CREATE_USER_FAILURE = 'CREATE_USER_FAILURE';\n\nexport const UPDATE_USER_REQUEST = 'UPDATE_USER_REQUEST';\nexport const UPDATE_USER_SUCCESS = 'UPDATE_USER_SUCCESS';\nexport const UPDATE_USER_FAILURE = 'UPDATE_USER_FAILURE';\n\n\nexport const GET_USER_REQUEST = 'GET_USER_REQUEST';\nexport const GET_USER_SUCCESS = 'GET_USER_SUCCESS';\nexport const GET_USER_FAILURE = 'GET_USER_FAILURE';\nexport const CLEAR_DATA = 'CLEAR_DATA';\n//===============================UPDATE USER========================//\n\nexport function updateUserRequest() {\n\treturn {\n\t\ttype: UPDATE_USER_REQUEST,\n\t\tstatus: REQUESTING,\n\t};\n}\n\nexport function updateUserSuccess(updateUser) {\n\treturn {\n\t\ttype: UPDATE_USER_SUCCESS,\n\t\tstatus: SUCCESS,\n\t\tupdateUser,\n\t};\n}\n\nexport function updateUserFailure(error) {\n\treturn {\n\t\ttype: UPDATE_USER_FAILURE,\n\t\tstatus: ERROR,\n\t\terror,\n\t};\n}\n\nexport function updateUser(payload,userId) {\n\treturn async (dispatch, getState, api) => {\n\t\tdispatch(updateUserRequest());\n\t\ttry {\n\t\t\tconst result = await api.put(`user/${userId}`, payload);\n\t\t\tconst resultJson = await result.json();\n\t\t\tif (result.errorCode > 400) {\n\t\t\t\tthrow new Error(`[${result.errorCode}] ${resultJson.error.errorMessage}`);\n\t\t\t} \n\t\t\tdispatch(updateUserSuccess(resultJson));\n\t\t} catch (e) {\n\t\t\tdispatch(updateUserFailure(e.message));\n\t\t}\n\t};\n}\n//=============== get user ================//\n\nexport function getUserRequest() {\n\treturn {\n\t\ttype: GET_USER_REQUEST,\n\t\tstatus: REQUESTING,\n\t};\n}\n\nexport function getUserSuccess(userObj) {\n\treturn {\n\t\ttype: GET_USER_SUCCESS,\n\t\tstatus: SUCCESS,\n\t\tuserObj,\n\t};\n}\n\nexport function getUserFailure(error) {\n\treturn {\n\t\ttype: GET_USER_FAILURE,\n\t\tstatus: ERROR,\n\t\terror,\n\t};\n}\n\nexport function getUser(userId) {\n\treturn async (dispatch, getState, api) => {\n\t\tdispatch(getUserRequest());\n\t\ttry {\n\t\t\tconst result = await api.get(`user/${userId}`);\n\t\t\tconst resultJson = await result.json();\n\t\t\tif (result.errorCode > 400) {\n\t\t\t\tthrow new Error(`[${result.errorCode}] ${resultJson.error.errorMessage}`);\n\t\t\t} \n\t\t\tdispatch(getUserSuccess(resultJson));\n\t\t} catch (e) {\n\t\t\tdispatch(getUserFailure(e.message));\n\t\t}\n\t};\n}\nexport function clearUserData(){\n    return{type: GET_USER_FAILURE};\n      \n}\n\nexport function clearData(){\n    dispatch(clearUserData(resultJson));\n}"]},"metadata":{},"sourceType":"script"}